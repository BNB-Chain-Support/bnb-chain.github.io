"use strict";(self.webpackChunkbeta_BNB_Docs=self.webpackChunkbeta_BNB_Docs||[]).push([[7337],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=c(n),h=i,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||s;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=h;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[d]="string"==typeof e?e:i,o[1]=a;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},33948:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=n(87462),i=(n(67294),n(3905));const s={sidebar_label:"Assumptions",sidebar_position:2,hide_table_of_contents:!1},o="Assumptions",a={unversionedId:"greenfield/design/assumptions",id:"greenfield/design/assumptions",title:"Assumptions",description:"The biggest assumption for the design is:",source:"@site/docs/greenfield/design/assumptions.md",sourceDirName:"greenfield/design",slug:"/greenfield/design/assumptions",permalink:"/docs/greenfield/design/assumptions",draft:!1,editUrl:"https://github.com/bnb-chain/bnb-chain.github.io/blob/master/docs/greenfield/design/assumptions.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Assumptions",sidebar_position:2,hide_table_of_contents:!1}},l={},c=[],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"assumptions"},"Assumptions"),(0,i.kt)("p",null,"The biggest assumption for the design is:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Greenfield is an economically sustainable, service-oriented\necosystem."))),(0,i.kt)("p",null,'By "self-sustained", it means that the service providers and\ncorresponding service consumers of Greenfield are rational; they\ncomplement each other. The providers and the blockchain validators will\nget paid a fair amount for the service they supply, while the users are\nwilling to pay for the service they use.'),(0,i.kt)("p",null,'By "service-oriented", it means that the value was created in Greenfield\nby providing service to the users of the ecosystem. It doesn\'t have\nbuilt-in value by itself.'),(0,i.kt)("p",null,"The implicit assumption underlying these two traits is that the majority\nof the providers and blockchain validators are reasonable entities and\nindividuals. They will not do evil given the profit they earn is larger\nthan the fortune they can plunder."),(0,i.kt)("p",null,"This is a self-justifiable trust for the whole ecosystem to exist: if a\nsubstantial percentage of providers and blockchain validators do evil\nand the ecosystem cannot heal itself by ruling out these malicious\nplayers, the whole ecosystem will not be used and have no value to\nexisting. If that happens, nobody wins even for a short time."),(0,i.kt)("p",null,"With this implicit built-in trust assumed, many designs are simplified\nas described in the below sections."),(0,i.kt)("p",null,"Another assumption is that both the service provider and consumer sides\nwould expect the actual \"service contracts\" between the two to allow\nlimited liability and provide exit options, even if the contracts are\ncarried out mostly by code. In consumers' interest, they do not want to\npay a large size of fund upfront and would like to choose a better\nprovider within the ecosystems or even outside whenever they want. On\nthe other side, in the service providers' interest, they do not want to\nbecome a data wasteyard or help circulate any content against their own\nprinciples."),(0,i.kt)("p",null,"The payment, data availability check, and a few other key features are\ndesigned based on this assumption."),(0,i.kt)("p",null,"The last big assumption is that data has value and users will want to\nextract this value with smart contract automation, privacy, and\ntransparency. This results in the considerable design for cross-chain\nbetween BNB Greenfield and BNB Smart Chain (BSC). This should be the\nmost important assumption and hopefully close to the truth."))}p.isMDXComponent=!0}}]);